import { getSession } from "@/lib/auth";
import { sFetch } from "@/lib/spotify";
import { NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest) {
  const session = await getSession();
  if (!session) {
    return NextResponse.json({ error: "Not authenticated" }, { status: 401 });
  }

  const { name, uris } = await request.json();
  if (!name || !uris || !Array.isArray(uris) || uris.length === 0) {
    return NextResponse.json(
      { error: "Playlist name and a list of track URIs are required." },
      { status: 400 }
    );
  }

  try {
    // 1. Create the playlist
    const playlist = await sFetch<{ id: string; external_urls: { spotify: string } }>(
      session.accessToken,
      `/users/${session.user.id}/playlists`,
      {
        method: "POST",
        body: JSON.stringify({
          name: name,
          public: false,
          description: "Auto-generated by Harmonic Discoveries",
        }),
      }
    );

    if (!playlist) {
      throw new Error("Failed to create playlist.");
    }
    
    // 2. Add tracks in chunks of 100
    for (let i = 0; i < uris.length; i += 100) {
      const chunk = uris.slice(i, i + 100);
      await sFetch(
        session.accessToken,
        `/playlists/${playlist.id}/tracks`,
        {
          method: "POST",
          body: JSON.stringify({ uris: chunk }),
        }
      );
    }
    
    return NextResponse.json({
      message: "Playlist created successfully",
      playlistUrl: playlist.external_urls.spotify,
    });

  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}
